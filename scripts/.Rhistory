install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = FALSE)
install.packages('dplyr')
install.packages('tidyr')
install.packages('lubridate')
install.packages('purrr')
install.packages("purrr")
install.packages('ggplot2')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = FALSE)
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
grp_pars2.0
grp_pars2.0.rda
library(ABM)
grp_pars2.0
outside_slurry_temp
abm(grp_pars = grp_pars2.0)
out <- abm(grp_pars = grp_pars2.0)
plot(out$time, out$CH4_emis_rate)
mean(out$CH4_emis_rate/1000)
mean(out$CH4_emis_rate/1000, na.rm = T)
plot(out$slurry_mass/1000)
5.5/1000
5500/1000
650*1.1
remove.pacakges('ABM')
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
library('ABM')
man_pars2.0
conc_fresh <- man_pars2.0$conc_fresh
View(conc_fresh)
View(conc_fresh)
conc_fresh$time <- c(0,100)
lapply(conc_fresh, rep(x,2))
lapply(conc_fresh, function(x) rep(x,2))
conc_fresh <- man_pars2.0$conc_fresh
conc_fresh <- lapply(conc_fresh, function(x) rep(x,2))
conc_fresh$time <- c(0,100)
abm(100, add_pars = list(conc_fresh = conc_fresh))
conc_fresh <- as.data.frame(conc_fresh)
abm(100, add_pars = list(conc_fresh = conc_fresh))
man_pars$conc_fresh <- conc_fresh
man_pars2.0$conc_fresh <- conc_fresh
abm(100, man_pars = man_pars2.0)
out2a <- abm(365)
out2b <- abm(365, add_pars = list(conc_fresh.VFA = 10))
plot(VFA_conc ~ time, data = out2a, type = 'l', xlab = 'Time (d)', ylab = 'VFA conc. (g/kg)', ylim = c(0,20))
lines(out2b$time, out2b$VFA_conc, col = "red")
remove.packages('ABM')
library(abm)
library(ABM)
test <- abm(365, add_pars = list(ki_NH4_max = 3))
plot(test$time, test$NH4_inhib_m0)
plot(test$time, test$NH4_inhib_m1)
test <- abm(365, add_pars = list(ki_NH4_max = 3, conc_fresh.TAN = 0.6))
plot(test$time, test$NH4_inhib_m1)
test <- abm(365, add_pars = list(ki_NH4_max = 3, conc_fresh.TAN = 2))
plot(test$time, test$NH4_inhib_m1)
plot(test$time, test$NH4_inhib_m0)
test <- abm(365, add_pars = list(ki_NH4_max = 3, conc_fresh.TAN = 2))
test <- abm(365, add_pars = list(ki_NH4_max = 3, conc_fresh.TAN = 2))
test2 <- abm(365, add_pars = list(ki_NH4_max = 10, conc_fresh.TAN = 2))
plot(test$time, test$NH4_inhib_m0)
plot(test$time, test$NH4_inhib_m0)
lines(test2$time, test2$NH4_inhib_m0 )
test <- abm(365, add_pars = list(ki_NH4_max = 2.7, conc_fresh.TAN = 2))
test2 <- abm(365, add_pars = list(ki_NH4_max = 10, conc_fresh.TAN = 2))
plot(test$time, test$NH4_inhib_m0)
lines(test2$time, test2$NH4_inhib_m0 )
plot(test$time, test$NH4_inhib_m1)
lines(test2$time, test2$NH4_inhib_m0 )
test <- abm(365, add_pars = list(ki_NH4_max.m2 = 3, conc_fresh.TAN = 2))
test2 <- abm(365, add_pars = list(ki_NH4_max.m2 = 10, conc_fresh.TAN = 2))
plot(test$time, test$NH4_inhib_m2)
lines(test2$time, test2$NH4_inhib_m2 )
fpd <- 'C16 H27 O8.7 N' # average manure
molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
library(biogas)
fpd <- 'C16 H27 O8.7 N' # average manure
molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
library(biogas)
install.packages('biogas')
fpd <- 'C16 H27 O8.7 N' # average manure
molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
library(biogas)
molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
molMass('CO2') * 16
molMass('CO2')
molMass(fpd)
calcCOD(fpd)
molMass(fpd)
fpd <- 'C16 H27 O8.7 N' # average manure
molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
fs0 <- 0.65 # from rittman
P_CO2_O2 <- (1-fs0) * molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
library(reactran)
install.packages('reactran')
install.packages('ReacTran')
library('ReacTran')
?`ReacTran-package`
library(biogas)
?biogas
biogas
?biogas
??biogas
library(ABM)
grp_pars2.0
abm()
?abm
grp_pars2.0
?optim
devtools::source_url('https://raw.githubusercontent.com/AU-BCE-EE/guidance/main/Picarro/PicarroFunction.R')
library('biogas')
calcCOD('C2H4O2')
calcCOD('C2H4O2')*59.044
colcCOD('H2')
calcCOD('H2')
calcCOD('H2')*2
.libPaths()
.libPaths("C:/Program Files/R/R-4.3.1/library")
.libPaths()
.libPaths()
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
install.packages('devtools')
install.packages("devtools")
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
install.packages('vctrs')
install.packages("vctrs")
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
.libPaths()
rm(list = ls())
# Load R libraries
library('ABM')
library('ggplot2')
library('dplyr')
library('tidyr')
library('readxl')
library('lubridate')
library('data.table')
# Source functions
source('ABM2D.R')
source('large.R')
source('int_temp.R')
rver <- 'C:/Users/au277187/AppData/Local/R/win-library/4.3/ALFAM2-versions/R-ver/'
cver <- 'C:/Users/au277187/AppData/Local/R/win-library/4.3/ALFAM2-versions/Rcpp-ver/'
rver <- 'C:/Users/au277187/AppData/Local/R/win-library/4.3/ALFAM2-versions/R-ver/'
cver <- 'C:/Users/au277187/AppData/Local/R/win-library/4.3/ALFAM2-versions/Rcpp-ver/'
devtools::install_github('sashahafner/ALFAM2@v2.0', lib = rver)
devtools::install_github('sashahafner/ALFAM2@v3.17', ref = 'Rcpp-dev', lib = cver, force = TRUE)
set.seed(123)
d <- data.frame(ct = 1:168, app.mthd = 'bc',
man.dm = 7, man.ph = 7, man.source = 'cattle',
air.temp = rnorm(168, mean = 10, sd = 5),
wind.2m = rnorm(168, mean = 5, sd = 1),
tan.app = 100)
nplots <- 1000
nplots <- 100
datp <- d[rep(1:nrow(d), nplots), ]
datp$id <- rep(1:nplots, each = nrow(d))
datpi <- datp
datpi$t.incorp <- 3
datpi$incorp <- 'shallow'
datpp <- ALFAM2:::prepDat(datp, value = 'data')
library(ALFAM2-versions)
library('C:\Users\au277187\AppData\Local\R\win-library\4.3\ALFAM2-versions\Rcpp-ver\ALFAM2')
.LibPaths(rver)
LibPaths(rver)
.libPaths(rver)
library(ALFAM2)
datpp <- ALFAM2:::prepDat(datp, value = 'data')
datpp$`__f4` <- 1
datpp$`__add.row` <- FALSE
.libPaths(rver)
library(ALFAM2)
datpp <- ALFAM2:::prepDat(datp, value = 'data')
datpp$`__f4` <- 1
datpp$`__add.row` <- FALSE
datpip <- ALFAM2:::prepDat(datpi, value = 'data')
datpip$`__f4` <- 1
datpip$`__add.row` <- FALSE
datpip <- ALFAM2:::prepDat(datpi, value = 'data')
datpip$`__f4` <- 1
datpip$`__add.row` <- FALSE
set.seed(123)
d <- data.frame(ct = 1:1E6 * 168 / 1E6, app.mthd = 'bc',
man.dm = 7, man.ph = 7, man.source = 'cattle',
air.temp = rnorm(1E6, mean = 10, sd = 5),
wind.2m = rnorm(1E6, mean = 5, sd = 1),
tan.app = 100)
datt <- d
datti <- datt
datti$t.incorp <- 3
datti$incorp <- 'shallow'
dattp <- ALFAM2:::prepDat(datt, value = 'data')
dattp$`__f4` <- 1
dattp$`__add.row` <- FALSE
dattip <- ALFAM2:::prepDat(datti, value = 'data')
dattip$`__f4` <- 1
dattip$`__add.row` <- FALSE
stdev <- times <- matrix(NA, nrow = 4, ncol = 3,
dimnames = list(c('plots', 'plots-incorp', 'times', 'times-incorp'),
c('R', 'Rcpp', 'flat-out')))
if ('ALFAM2' %in% (.packages())) detach('package:ALFAM2')
library(data.table)
library(data.table)
inp <- data.table::data.table(
avg_temp = c(F, F, T, T, F, F, T, T, F, F, F, F, F, T, T, F, F, T, T),
avg_slur = c(F, T, F, T, F, T, F, T, F, F, F, F, T, F, T, F, T, F, T),
align = c(T, T, T, T, F, F, F, F, F, F, F, F, F, F, F, T, T, T, T),
scale = c(rep(c('large', 'large', 'large', 'large'), 2), c('large', 'large', 'large'), c('full', 'full', 'full', 'full'), c('small', 'small', 'small', 'small')),
scenario = c(rep(c('data', 'data', 'data', 'data'), 2), c('model', 'model', 'model'), c('model', 'model', 'model', 'model'), c('data', 'data', 'data', 'data')),
startup = c(rep(c(0, 0, 0, 0), 2), c(0, 0, 0), c(1, 1, 1, 1), c(0, 0, 0, 0)),
parmset = c(rep(c('','','',''), 2), c('A', 'B', 'C'), c('A', 'A', 'A', 'A'), c('', '', '', '')),
refill = c(rep(c(F, F, F, F), 2), c(F, F, F), c(T, T, T, T), c(F, F, F, F))
)
rm(list = ls())
library(readxl)
library(dplyr)
library(ABM)
#dat <- '../inputs/saman_paper/Sow lactating average diet.xlsm'
#dat <- '../inputs/saman_paper/Sow gestation average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig 5% sugar beet.xlsm'
dat <- '../inputs/main.xlsm'
w <- 1
ff <- list.files('../R', full.names = T)
for(i in ff) source(i)
farm_dat <- get_farm(w = w, days = 365, dat = dat)
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_carbon_accounting/test_farm")
rm(list = ls())
library(readxl)
library(dplyr)
library(ABM)
#dat <- '../inputs/saman_paper/Sow lactating average diet.xlsm'
#dat <- '../inputs/saman_paper/Sow gestation average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig 5% sugar beet.xlsm'
dat <- '../inputs/main.xlsm'
w <- 1
ff <- list.files('../R', full.names = T)
for(i in ff) source(i)
farm_dat <- get_farm(w = w, days = 365, dat = dat)
CP
(bedding * bedding_TS * 0.005 * 6.25)/1000)
(bedding * bedding_TS * 0.005 * 6.25)/1000
# convert to COD units in slurry (g COD or g element/kg slurry)
# bedding material adds a little to CP
# + (bedding * bedding_TS * 0.005 * 6.25)/1000
CP <- (excreta_dat$manure[['CP_feces']] + feed_spill[['CP']]) / COD_conv[['CP']]/slurry
CP
rm(list = ls())
library(readxl)
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_carbon_accounting/test_farm")
rm(list = ls())
library(readxl)
library(dplyr)
library(ABM)
#dat <- '../inputs/saman_paper/Sow lactating average diet.xlsm'
#dat <- '../inputs/saman_paper/Sow gestation average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig 5% sugar beet.xlsm'
dat <- '../inputs/main.xlsm'
w <- 1
ff <- list.files('../R', full.names = T)
for(i in ff) source(i)
farm_dat <- get_farm(w = w, days = 365, dat = dat)
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_carbon_accounting/run")
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ggplot2)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# Get packages
abm_packages()
# Get input file names
fs <- list.files("../inputs/ISRP", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
i <- fs[1]
storage_mode <- TRUE
years <- 3
dat <- i
# read demo and determine number of abm runs that has to be done for the barn (due to different sections)
s <- read_excel(dat, sheet = "in-barn", skip = 1, col_names = TRUE)
sim <- as.numeric(sum(grepl("Section ", colnames(s))))
# simulate all sections in the barn
abm_barn_out <- abm_barn(dat = dat, sim = sim, years = years, temp_overwrite = temp_overwrite)
temp_overwrite = 'Vechi'
# simulate all sections in the barn
abm_barn_out <- abm_barn(dat = dat, sim = sim, years = years, temp_overwrite = temp_overwrite)
# pull out results, both barn emission (used in calcNorm.R) and removed slurry (used in abm_storage.R)
rem_dat <- abm_barn_out$rem_dat
barn_dat <- abm_barn_out$barn_dat
conc_fresh <- abm_barn_out$conc_fresh
xa_fresh <- abm_barn_out$xa_fresh
farm_dat <- abm_barn_out$farm_dat
if (isTRUE(storage_mode)){
# take out temperatures and repeat for years.
temps <- get_temp(years, dat = dat, sheet = "outside temp")
# simulate storages
abm_storage_out <- abm_storage(years = years, rem_dat = rem_dat,
conc_fresh = conc_fresh, xa_fresh = xa_fresh, temps = temps,
doy = doy, temp_overwrite = temp_overwrite)
}
# pull out storage data for calculating emission factors in calcNorm
storage_dat <- abm_storage_out$storage_dat
digestate_dat <- abm_storage_out$digestate_dat
storage_dat$slurry_mass
mean(storage_dat$slurry_mass)
mean(storage_dat$slurry_mass)/1000
cum(storage_dat$slurry_prod_rate)/3
cumsum(storage_dat$slurry_prod_rate)/3
cumsum(storage_dat$slurry_prod_rate)/3/1000
max(cumsum(storage_dat$slurry_prod_rate)/3/1000)
mean(storage_dat$slurry_mass)/1000/(7656.762) * 12
rm(list = ls())
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2024-KVIK/scripts")
library(data.table)
library(readxl)
list.files('../data/original/')
dat <- read_excel('../data/original/Frederik NH3 og Denitrifikationstab.xlsx')
dat <- read_excel('../data/original/Frederik NH3 og Denitrifikationstab.xlsx')
View(dat)
View(dat)
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2024-KVIK/scripts")
rm(list = ls())
library(data.table)
library(readxl)
dat_VS <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 1, skip = 1))
dat_anim <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 2, skip = 1))
#fix mismatch in names
dat_anim[DyrNavn == 'Smågrise', DyrNavn := 'Smågrise, 7,5-30 kg']
dat_anim[DyrNavn == 'Slagtesvin', DyrNavn := 'Slagtesvin, 30-100,0 kg']
dat <- merge.data.table(dat_VS, dat_anim)
#change some names
old_names <- c('FirstOfAntalDyr', 'Ton gødning ab dyr', 'Tørstof pct ab dyr')
new_names <- c('NDyr', 'GoednabDyr', 'TSabDyr')
setnames(dat, old = old_names, new = new_names)
NDyr_farestald <- dat[StaldID %in% c(64, 65) & !duplicated(StaldID), sum(NDyr)]
NDyr_løbestald <- dat[DyrID == 12 & !duplicated(StaldID) & !StaldID %in% c(64, 65), sum(NDyr)]
frac_farestald <- NDyr_farestald/(NDyr_løbestald + NDyr_farestald)
frac_løbestald <- 1- frac_farestald
#make new coloumn "NDyr_mod" which can be directly multiplied with excretions to get yearly excretion.
dat[, NDyr_mod := NDyr]
dat[StaldID %in% c(64, 65), NDyr_mod := NDyr * 1/frac_farestald]
dat[!StaldID %in% c(64, 65) & DyrID == 12, NDyr_mod := 1/frac_løbestald]
#calculate yearly excretions on columns
cols <- c('NabDyr', 'TANabDyr', 'GoednabDyr' )
new_cols <- paste0('Tot', cols)
dat[, (new_cols) := .SD * NDyr_mod, .SDcols = cols]
#model dat
dat_model_pig <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx')))
rm(list = ls())
library(data.table)
library(readxl)
dat_VS <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 1, skip = 1))
dat_anim <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 2, skip = 1))
#fix mismatch in names
dat_anim[DyrNavn == 'Smågrise', DyrNavn := 'Smågrise, 7,5-30 kg']
dat_anim[DyrNavn == 'Slagtesvin', DyrNavn := 'Slagtesvin, 30-100,0 kg']
dat <- merge.data.table(dat_VS, dat_anim)
#change some names
old_names <- c('FirstOfAntalDyr', 'Ton gødning ab dyr', 'Tørstof pct ab dyr')
new_names <- c('NDyr', 'GoednabDyr', 'TSabDyr')
setnames(dat, old = old_names, new = new_names)
NDyr_farestald <- dat[StaldID %in% c(64, 65) & !duplicated(StaldID), sum(NDyr)]
NDyr_løbestald <- dat[DyrID == 12 & !duplicated(StaldID) & !StaldID %in% c(64, 65), sum(NDyr)]
frac_farestald <- NDyr_farestald/(NDyr_løbestald + NDyr_farestald)
frac_løbestald <- 1- frac_farestald
#make new coloumn "NDyr_mod" which can be directly multiplied with excretions to get yearly excretion.
dat[, NDyr_mod := NDyr]
dat[StaldID %in% c(64, 65), NDyr_mod := NDyr * 1/frac_farestald]
dat[!StaldID %in% c(64, 65) & DyrID == 12, NDyr_mod := 1/frac_løbestald]
#calculate yearly excretions on columns
cols <- c('NabDyr', 'TANabDyr', 'GoednabDyr' )
new_cols <- paste0('Tot', cols)
dat[, (new_cols) := .SD * NDyr_mod, .SDcols = cols]
#model dat
dat_model_pig <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx')))
names(dat_model_pig) <- as.character(dat_model_pig[1, ])
dat_model_pig <- dat_model_pig[-c(1:2), ]
dat_model_cattle <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx', sheet = 'Tabel_kvæg')))
names(dat_model_cattle) <- as.character(dat_model_cattle[1, ])
dat_model_cattle <- dat_model_cattle[-c(1:2), ]
dat_model <- rbind(dat_model_pig, dat_model_cattle, fill =T)
#fix names in model spreadsheet
old_names <- c('CH4-udledning stald, kg/t gylle ab dyr',
'CH4-udledning stald og for/afhent.tank, kg/t gylle ab dyr',
'CH4-udledning lager, kg/t gylle ab dyr',
'CH4-udledning, afgasset gylle, kg/t gylle ab dyr',
'CH4-produktion, biogasanlæg, kg CH4/t gylle ab dyr',
'CH4-udledning stald, kg/t gylle ab stald',
'CH4-udledning stald og for/afhent.tank, kg/t gylle ab stald',
'CH4-udledning lager, kg/t gylle ab stald',
'CH4-udledning, afgasset gylle, kg/t gylle ab stald',
'CH4-produktion, biogasanlæg, inkl. halm, kg CH4/t gylle ab stald',
'NH3-udledning stald tempkorr, kg-N/t gylle ab dyr',
'NH3-udledning lager tempkorr, kg-N/t gylle ab dyr'
)
new_names <- c('CH4_dyr_stald', 'CH4_dyr_Stald_aft', 'CH4_dyr_lager', 'CH4_dyr_afg', 'CH4_dyr_biog',
'CH4_stald_stald', 'CH4_stald_Stald_aft', 'CH4_stald_lager', 'CH4_stald_afg', 'CH4_stald_biog',
'NH3_dyr_stald', 'NH3_dyr_lager'
)
setnames(dat_model, old = old_names, new = new_names)
dat_model <- dat_model[, c((new_names), 'GoedningsID') := lapply(.SD, as.numeric), .SDcols = c(new_names, 'GoedningsID')][, c(..new_names, 'StaldID', 'GoedningsID')]
#rows with a dot in StaldID
.rows <- dat_model[grepl("\\.", StaldID)]
#create replacement rows by splitting StaldID
.rows_rpl <- do.call(rbind, lapply(1:.rows[,.N], function(x) {
id <- unlist(strsplit(as.character(.rows[x, 'StaldID']), "\\."))
if(any(grepl("\\D", id))) id[grepl("\\D", id)] <- gsub("\\D", "", id[grepl("\\D", id)])
x <- rbindlist(replicate(length(id), .rows[x], simplify = FALSE))
x[, StaldID := ..id]
return(x)
}
))
dat_model <- rbind(dat_model[!grepl("\\.", StaldID)], .rows_rpl)[, StaldID := as.numeric(StaldID)]
View(dat_model)
dat_merged <- merge.data.table(dat, dat_model, by = c('StaldID', 'GoedningsID'), all = T)
fwrite(dat_merged, '../data/dat_merged.csv', row.names = F)
View(dat_merged)
#model dat
dat_model_pig <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx')))
names(dat_model_pig) <- as.character(dat_model_pig[1, ])
dat_model_pig <- dat_model_pig[-c(1:2), ]
View(dat_model_pig)
View(dat_model)
View(dat_model_pig)
rm(list = ls())
library(data.table)
library(readxl)
dat_VS <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 1, skip = 1))
dat_anim <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 2, skip = 1))
#fix mismatch in names
dat_anim[DyrNavn == 'Smågrise', DyrNavn := 'Smågrise, 7,5-30 kg']
dat_anim[DyrNavn == 'Slagtesvin', DyrNavn := 'Slagtesvin, 30-100,0 kg']
dat <- merge.data.table(dat_VS, dat_anim)
#change some names
old_names <- c('FirstOfAntalDyr', 'Ton gødning ab dyr', 'Tørstof pct ab dyr')
new_names <- c('NDyr', 'GoednabDyr', 'TSabDyr')
setnames(dat, old = old_names, new = new_names)
NDyr_farestald <- dat[StaldID %in% c(64, 65) & !duplicated(StaldID), sum(NDyr)]
NDyr_løbestald <- dat[DyrID == 12 & !duplicated(StaldID) & !StaldID %in% c(64, 65), sum(NDyr)]
frac_farestald <- NDyr_farestald/(NDyr_løbestald + NDyr_farestald)
frac_løbestald <- 1- frac_farestald
#make new coloumn "NDyr_mod" which can be directly multiplied with excretions to get yearly excretion.
dat[, NDyr_mod := NDyr]
dat[StaldID %in% c(64, 65), NDyr_mod := NDyr * 1/frac_farestald]
dat[!StaldID %in% c(64, 65) & DyrID == 12, NDyr_mod := 1/frac_løbestald]
#calculate yearly excretions on columns
cols <- c('NabDyr', 'TANabDyr', 'GoednabDyr' )
new_cols <- paste0('Tot', cols)
dat[, (new_cols) := .SD * NDyr_mod, .SDcols = cols]
#model dat
dat_model_pig <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx')))
names(dat_model_pig) <- as.character(dat_model_pig[1, ])
dat_model_pig <- dat_model_pig[-c(1:2), ]
dat_model_cattle <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx', sheet = 'Tabel_kvæg')))
names(dat_model_cattle) <- as.character(dat_model_cattle[1, ])
dat_model_cattle <- dat_model_cattle[-c(1:2), ]
dat_model <- rbind(dat_model_pig, dat_model_cattle, fill =T)
#fix names in model spreadsheet
old_names <- c('CH4-udledning stald, kg/t gylle ab dyr',
'CH4-udledning stald og for/afhent.tank, kg/t gylle ab dyr',
'CH4-udledning lager, kg/t gylle ab dyr',
'CH4-udledning, afgasset gylle, kg/t gylle ab dyr',
'CH4-produktion, biogasanlæg, kg CH4/t gylle ab dyr',
'CH4-udledning stald, kg/t gylle ab stald',
'CH4-udledning stald og for/afhent.tank, kg/t gylle ab stald',
'CH4-udledning lager, kg/t gylle ab stald',
'CH4-udledning, afgasset gylle, kg/t gylle ab stald',
'CH4-produktion, biogasanlæg, inkl. halm, kg CH4/t gylle ab stald',
'NH3-udledning stald tempkorr, kg-N/t gylle ab dyr',
'NH3-udledning lager tempkorr, kg-N/t gylle ab dyr'
)
new_names <- c('CH4_dyr_stald', 'CH4_dyr_Stald_aft', 'CH4_dyr_lager', 'CH4_dyr_afg', 'CH4_dyr_biog',
'CH4_stald_stald', 'CH4_stald_Stald_aft', 'CH4_stald_lager', 'CH4_stald_afg', 'CH4_stald_biog',
'NH3_dyr_stald', 'NH3_dyr_lager'
)
setnames(dat_model, old = old_names, new = new_names)
dat_model <- dat_model[, c((new_names), 'GoedningsID') := lapply(.SD, as.numeric), .SDcols = c(new_names, 'GoedningsID')][, c(..new_names, 'StaldID', 'GoedningsID','Scenarie')]
View(dat_model)
#rows with a dot in StaldID
.rows <- dat_model[grepl("\\.", StaldID)]
#create replacement rows by splitting StaldID
.rows_rpl <- do.call(rbind, lapply(1:.rows[,.N], function(x) {
id <- unlist(strsplit(as.character(.rows[x, 'StaldID']), "\\."))
if(any(grepl("\\D", id))) id[grepl("\\D", id)] <- gsub("\\D", "", id[grepl("\\D", id)])
x <- rbindlist(replicate(length(id), .rows[x], simplify = FALSE))
x[, StaldID := ..id]
return(x)
}
))
dat_model <- rbind(dat_model[!grepl("\\.", StaldID)], .rows_rpl)[, StaldID := as.numeric(StaldID)]
dat_merged <- merge.data.table(dat, dat_model, by = c('StaldID', 'GoedningsID','Scenarie'), all = T)
dat_merged <- merge.data.table(dat, dat_model, by = c('StaldID', 'GoedningsID'), all = T)
View(dat_merged)
