cond <- expression(avg_slur == F & avg_temp == F & scale != 'full' & align & time != 0)
subdat <- dat[eval(cond)]
stat <- subdat[variable %in% c('CH4_emis_rate','CH4_emis_rate_vs'), .(mean(value), sd(value)),
by = c('scale', 'variable')]
stat
stat <- subdat_l[variable %in% c('CH4_emis_rate','CH4_emis_rate_vs'), .(mean(value), sd(value)),
by = c('scale', 'variable')]
stat
cond <- expression(avg_slur == F & avg_temp == F & scale != 'full' & align & time != 0)
subdat <- dat[eval(cond)]
subdat[, depth := factor(zm, levels = sort(zm, decreasing = TRUE), labels = paste(round(sort(zm, decreasing = TRUE), 1), 'm'))]
subdat[, center := factor(rm, levels = sort(rm, decreasing = TRUE), labels = paste(round(sort(rm, decreasing = TRUE), 1), 'm'))]
subdat[, date := as.POSIXct(date, format = '%Y-%m-%d')]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_l <- data.table(pivot_longer(subdat_w, cols = names(subdat_w)[!names(subdat_w) %in% names(subdat)], values_to = 'value', names_to = 'variable'))
stat <- subdat_l[variable %in% c('CH4_emis_rate','CH4_emis_rate_vs'), .(mean(value), sd(value)),
by = c('scale', 'variable')]
stat
0.003784/0.00656578
1-0.003784/0.00656578
1-0.165375/0.277815276
cond <- expression(avg_slur == F & avg_temp == F & scale != 'full' & align & time != 0 & scneario == 'data')
subdat <- dat[eval(cond)]
cond <- expression(avg_slur == F & avg_temp == F & scale != 'full' & align & time != 0 & scenario == 'data')
subdat <- dat[eval(cond)]
subdat[, depth := factor(zm, levels = sort(zm, decreasing = TRUE), labels = paste(round(sort(zm, decreasing = TRUE), 1), 'm'))]
subdat[, center := factor(rm, levels = sort(rm, decreasing = TRUE), labels = paste(round(sort(rm, decreasing = TRUE), 1), 'm'))]
subdat[, date := as.POSIXct(date, format = '%Y-%m-%d')]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_l <- data.table(pivot_longer(subdat_w, cols = names(subdat_w)[!names(subdat_w) %in% names(subdat)], values_to = 'value', names_to = 'variable'))
stat_small_vs_large <- subdat_l[variable %in% c('CH4_emis_rate','CH4_emis_rate_vs'), .(mean(value), sd(value)),
by = c('scale', 'variable')]
stat_small_vs_large
stat_buttom_vs_top <- subdat_l[variable %in% c('CH4_emis_rate','CH4_emis_rate_vs') & scale == 'large',
.(mean(value), sd(value)), by = c('variable','zm')]
stat_buttom_vs_top
rm(list = ls())
library(ggplot2)
library(dplyr)
library(tidyr)
library(data.table)
dat <- fread('../output/full_dat_qd.csv')
cond <- expression(avg_slur == F & avg_temp == F & scale == 'full' & !align & time > 365 & variable == 'CH4_emis_rate')
subdat <- dat[eval(cond)]
subdat[, depth := factor(zm, levels = sort(zm, decreasing = TRUE), labels = paste(round(sort(zm, decreasing = TRUE), 1), 'm'))]
subdat[, center := factor(rm, levels = sort(rm, decreasing = TRUE), labels = paste(round(sort(rm, decreasing = TRUE), 1), 'm'))]
subdat[, date := as.POSIXct(date, format = '%Y-%m-%d')]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
cond <- expression(avg_slur == F & avg_temp == F & scale == 'full' & !align & time > 365)
subdat <- dat[eval(cond)]
subdat[, depth := factor(zm, levels = sort(zm, decreasing = TRUE), labels = paste(round(sort(zm, decreasing = TRUE), 1), 'm'))]
subdat[, center := factor(rm, levels = sort(rm, decreasing = TRUE), labels = paste(round(sort(rm, decreasing = TRUE), 1), 'm'))]
subdat[, date := as.POSIXct(date, format = '%Y-%m-%d')]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_l <- data.table(pivot_longer(subdat_w, cols = names(subdat_w)[!names(subdat_w) %in% names(subdat)], values_to = 'value', names_to = 'variable'))
stat <- subdat_l[variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs'),
.(mean(value), sd(value)), by = c('zm', 'variable')]
stat
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/Kamp-2023-Tank-Temp-CH4-Modelling/ABM1D/scripts")
rm(list = ls())
library(ggplot2)
library(data.table)
library(tidyr)
# get data
#dat <- fread('../output/minimum_dat_example.csv')
dat <- fread('../output/full_dat_qd.csv')
cond <- expression(scale == 'large' & !align & scenario == 'data')
subdat <- dat[eval(cond)]
# extract zm of interest from measured dat
posit <- fread('../../meas-temp/output-3D/temp_large_day.csv')
zms <- unique(posit[, zm])
rms <- unique(posit[, rm])
cond2 <- expression(scale != 'full'  & align & scenario == 'data')
subdat <- dat[eval(cond)]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_l <- data.table(pivot_longer(subdat_w, cols = names(subdat_w)[!names(subdat_w) %in% names(subdat)], values_to = 'value', names_to = 'variable'))
cond <- expression(scale != 'full'  & align & scenario == 'data')
subdat <- dat[eval(cond)]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_l <- data.table(pivot_longer(subdat_w, cols = names(subdat_w)[!names(subdat_w) %in% names(subdat)], values_to = 'value', names_to = 'variable'))
subdat_l[variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs'), .(mean(value), sd(value)), by = c('variable', 'scale')]
stat_small_vs_big <- subdat_l[variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs'), .(mean(value), sd(value)), by = c('variable', 'scale')]
stat_small_vs_big <- subdat_l[variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs'), .(mean(value), sd(value)), by = c('variable', 'scale','avg_slur','avg_temp')]
View(stat_small_vs_big)
'variable',
stat_small_vs_big <- subdat_l[variable %in% c('CH4_emis_rate_vs'), .(mean(value), sd(value)), by = c('variable', 'scale','avg_slur','avg_temp')]
View(stat_small_vs_big)
stat_small_vs_big <- subdat_l[variable %in% c('CH4_emis_rate_vs'), .(mean(value)), by = c('variable', 'scale','avg_slur','avg_temp')]
View(stat_small_vs_big)
rm(list = ls())
library(ggplot2)
library(data.table)
library(tidyr)
# get data
#dat <- fread('../output/minimum_dat_example.csv')
dat <- fread('../output/full_dat_qd.csv')
subdat <- dat[eval(cond)]
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/Kamp-2023-Tank-Temp-CH4-Modelling/ABM1D/scripts")
# get data
#dat <- fread('../output/minimum_dat_example.csv')
dat <- fread('../output/full_dat_qd.csv')
rm(list = ls())
library(ggplot2)
library(data.table)
library(tidyr)
# get data
#dat <- fread('../output/minimum_dat_example.csv')
dat <- fread('../output/full_dat_qd.csv')
rm(list = ls())
library(ggplot2)
library(dplyr)
library(tidyr)
library(data.table)
dat <- fread('../output/full_dat_qd.csv')
cond <- expression(avg_slur == F & avg_temp == F & scale == 'full' & !align & time > 365)
subdat <- dat[eval(cond)]
subdat[, depth := factor(zm, levels = sort(zm, decreasing = TRUE), labels = paste(round(sort(zm, decreasing = TRUE), 1), 'm'))]
subdat[, center := factor(rm, levels = sort(rm, decreasing = TRUE), labels = paste(round(sort(rm, decreasing = TRUE), 1), 'm'))]
subdat[, date := as.POSIXct(date, format = '%Y-%m-%d')]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_l <- data.table(pivot_longer(subdat_w, cols = names(subdat_w)[!names(subdat_w) %in% names(subdat)], values_to = 'value', names_to = 'variable'))
View(subdat_l)
stat <- subdat_l[variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs'),
.(mean(value), sd(value)), by = c('zm', 'variable')]
plotdat <- subdat_l[ variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs')]
prms <- c('2.9 m', '17.5 m')
pzms <- c('5.4 m', '3.8 m', '2.1 m', '0.5 m', '0.1 m')
plotdat <- subdat_l[ variable %in% c('CH4_emis_rate_vs') & center %in% prms & depth %in% pzms ]
unique(plotdat[, depth])
ggplot(plotdat, aes(x = date, y = value)) +
geom_line() +
labs(x = '', y = expression('CH'[4]~'emission, kg m'^{-3}~'d'^{-1}), col = '', linetype = "") +
facet_grid(depth ~ center) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
View(plotdat)
prms <- c('2.9 m', '17.5 m')
pzms <- c('5.4 m', '3.8 m', '2.1 m', '0.5 m', '0.1 m')
plotdat <- subdat_l[variable %in% c('CH4_emis_rate_vs') & center %in% prms & depth %in% pzms ]
plotdat <- subdat_l[variable %in% c('CH4_emis_rate_vs')]# & center %in% prms & depth %in% pzms ]
prms <- c('2.9 m', '17.5 m')
pzms <- c('5.4 m', '3.8 m', '2.1 m', '0.5 m', '0.1 m')
unique(plotdat[, depth])
unique(plotdat[, center])
prms <- c('2.9 m', '17.5 m')
pzms <- c('5.5 m', '4.0 m', '2.9 m', '1.8 m', '0.2 m')
plotdat <- subdat_l[variable %in% c('CH4_emis_rate_vs') & center %in% prms & depth %in% pzms ]
ggplot(plotdat, aes(x = date, y = value)) +
geom_line() +
labs(x = '', y = expression('CH'[4]~'emission, kg m'^{-3}~'d'^{-1}), col = '', linetype = "") +
facet_grid(depth ~ center) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
rm(list = ls())
library(ggplot2)
library(data.table)
library(doParallel)
# get data
#dat <- fread('../output/minimum_dat_example.csv')
dat <- fread('../output/full_dat_qd.csv')
# extract zm of interest from measured dat
posit <- fread('../../meas-temp/output-3D/temp_large_day.csv')
zms <- unique(posit[, zm])
rms <- unique(posit[, rm])
cond <- expression(avg_slur == F & avg_temp == F & scale == 'large' & !align & variable == 'CH4_emis_rate')
subdat <- dat[eval(cond)]
coords <- foreach(i = zms, j = rms, .combine = rbind) %do% {
subdat_m <- subdat[scenario == 'model']
zmc <- unique(subdat_m[abs(zm - i) == min(abs(zm - i)), zm])
rmc <- unique(subdat_m[abs(rm - j) == min(abs(rm - j)), rm])
coords <- data.table(zmc = zmc, rmc = rmc)
return(coords)
}
plotdat <- subdat[round(zm, 4) %in% round(c(coords[, zmc], zms), 4) & round(rm, 2) %in% round(c(coords[, rmc], rms), 2), .SD, .SDcols = names(subdat)]
closest_index_zm <- function(x) {
return(which.min(abs(x - zms)))
}
closest_index_rm <- function(x) {
return(which.min(abs(x - rms)))
}
plotdat[, ":="(closest_idx_zm = sapply(zm, closest_index_zm),
closest_idx_rm = sapply(rm, closest_index_rm))]
plotdat[, ":=" (zm = zms[closest_idx_zm],
rm = rms[closest_idx_rm])]
plotdat[, depth := factor(zm, levels = sort(zm, decreasing = TRUE), labels = paste(round(sort(zm, decreasing = TRUE), 1), 'm'))]
plotdat[, center := factor(rm, levels = sort(rm, decreasing = TRUE), labels = paste(round(sort(rm, decreasing = TRUE), 1), 'm'))]
plotdat[, date := as.POSIXct(date, format = '%Y-%m-%d')]
plotdat[parmset == '', parmset := 'data']
plotdat <- plotdat[date <= max(date[scenario == 'data'])]
ggplot(plotdat, aes(x = date, y = value, col = parmset, linetype = parmset)) +
geom_line() +
labs(x = '', y = expression('CH'[4]~'emission rate, kg m'^{-3}*'d'^{-1}), col = '', linetype = "") +
facet_grid(depth ~ center) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_linetype_manual(values = c('dashed','dashed','dashed','solid'))
rm(list = ls())
library(ggplot2)
library(dplyr)
library(tidyr)
library(data.table)
dat <- fread('../output/full_dat_qd.csv')
cond <- expression(avg_slur == F & avg_temp == F & scale == 'full' & !align & time > 365)
subdat <- dat[eval(cond)]
cond <- expression(avg_slur == F & avg_temp == F & scale == 'full' & !align)
subdat <- dat[eval(cond)]
subdat[, depth := factor(zm, levels = sort(zm, decreasing = TRUE), labels = paste(round(sort(zm, decreasing = TRUE), 1), 'm'))]
subdat[, center := factor(rm, levels = sort(rm, decreasing = TRUE), labels = paste(round(sort(rm, decreasing = TRUE), 1), 'm'))]
subdat[, date := as.POSIXct(date, format = '%Y-%m-%d')]
subdat_w <- pivot_wider(subdat, names_from = 'variable', values_from = 'value')
subdat_w$CH4_emis_rate_vs <- subdat_w$CH4_emis_rate/subdat_w$VS * 1000
subdat_l <- data.table(pivot_longer(subdat_w, cols = names(subdat_w)[!names(subdat_w) %in% names(subdat)], values_to = 'value', names_to = 'variable'))
stat <- subdat_l[variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs'),
.(mean(value), sd(value)), by = c('zm', 'variable')]
plotdat <- subdat_l[ variable %in% c('CH4_emis_rate', 'CH4_emis_rate_vs')]
prms <- c('2.9 m', '17.5 m')
pzms <- c('5.5 m', '4.0 m', '2.9 m', '1.8 m', '0.2 m')
plotdat <- subdat_l[variable %in% c('CH4_emis_rate_vs') & center %in% prms & depth %in% pzms ]
ggplot(plotdat, aes(x = date, y = value)) +
geom_line() +
labs(x = '', y = expression('CH'[4]~'emission, kg m'^{-3}~'d'^{-1}), col = '', linetype = "") +
facet_grid(depth ~ center) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
rm(list = ls())
# Load R libraries
library('ggplot2')
library('doParallel')
library('data.table')
library('readxl')
library('dplyr')
library('tidyr')
library('lubridate')
library('data.table')
library('ReacTran')
library('stringi')
#library('BurStMisc')
#getwd()
#search <- "C:/Users/fdalb/Documents/Frederik Rask Dalby/"
#search <- "C:/Users/fdalb/Documents/Frederik Rask Dalby/Kamp-2023-Tank-Temp-CH4-Modelling/ABM1D/R"
#scriptSearch('N', path = search, subdirs = TRUE)
# Source functions
source('run_ABM1D_parl.R')
source('setup_dat.R')
source('large_parl.R')
source('run_parl.R')
ff <- list.files('../../../ABM1D/R', full.names = T)
for(i in ff) source(i)
layers <- 30
inp <- data.table::data.table(
avg_temp = c(F, F, T, T, F, F, T, T, F, F, T, T, F, F, F, F, F, T, T),
avg_slur = c(F, T, F, T, F, T, F, T, F, T, F, T, F, F, F, F, T, F, T),
align = c(F, F, F, F, T, T, T, T, F, F, F, F, F, F, F, T, T, T, T),
scale = c(c('full', 'full', 'full', 'full'), rep(c('large', 'large', 'large', 'large'), 2), c('large', 'large', 'large'), c('small', 'small', 'small', 'small')),
scenario = c(c('model', 'model', 'model', 'model'), rep(c('data', 'data', 'data', 'data'), 2), c('model', 'model', 'model'), c('data', 'data', 'data', 'data')),
parmset = c(c('A', 'A', 'A', 'A'), rep(c('','','',''), 2), c('A', 'B', 'C'), c('', '', '', '')),
refill = c(c(T, T, T, T), rep(c(F, F, F, F), 2), c(F, F, F), c(F, F, F, F))
)
inp[, layers := layers]
debug(abm)
inp <- inp[1,]
run_parl(inp[,avg_temp], inp[,avg_slur], inp[,align], inp[,scale], inp[,scenario], inp[,parmset], inp[,refill], inp[,layers])
View(temp_C_dat)
undebug(abm)
rm(list = ls())
# Load R libraries
library('ggplot2')
library('doParallel')
library('data.table')
library('readxl')
library('dplyr')
library('tidyr')
library('lubridate')
library('data.table')
library('ReacTran')
library('stringi')
#library('BurStMisc')
#getwd()
#search <- "C:/Users/fdalb/Documents/Frederik Rask Dalby/"
#search <- "C:/Users/fdalb/Documents/Frederik Rask Dalby/Kamp-2023-Tank-Temp-CH4-Modelling/ABM1D/R"
#scriptSearch('N', path = search, subdirs = TRUE)
# Source functions
source('run_ABM1D_parl.R')
source('setup_dat.R')
source('large_parl.R')
source('run_parl.R')
ff <- list.files('../../../ABM1D/R', full.names = T)
for(i in ff) source(i)
layers <- 30
inp <- data.table::data.table(
avg_temp = c(F, F, T, T, F, F, T, T, F, F, T, T, F, F, F, F, F, T, T),
avg_slur = c(F, T, F, T, F, T, F, T, F, T, F, T, F, F, F, F, T, F, T),
align = c(F, F, F, F, T, T, T, T, F, F, F, F, F, F, F, T, T, T, T),
scale = c(c('full', 'full', 'full', 'full'), rep(c('large', 'large', 'large', 'large'), 2), c('large', 'large', 'large'), c('small', 'small', 'small', 'small')),
scenario = c(c('model', 'model', 'model', 'model'), rep(c('data', 'data', 'data', 'data'), 2), c('model', 'model', 'model'), c('data', 'data', 'data', 'data')),
parmset = c(c('A', 'A', 'A', 'A'), rep(c('','','',''), 2), c('A', 'B', 'C'), c('', '', '', '')),
refill = c(c(T, T, T, T), rep(c(F, F, F, F), 2), c(F, F, F), c(F, F, F, F))
)
inp[, layers := layers]
inp <- inp[1,]
run_parl(inp[,avg_temp], inp[,avg_slur], inp[,align], inp[,scale], inp[,scenario], inp[,parmset], inp[,refill], inp[,layers])
rm(list = ls())
library(data.table)
library(dplyr)
library(tidyr)
library(deSolve)
library(lubridate)
library(ggplot2)
library(ReacTran)
library(Rcpp)
library(profvis)
library(stringi)
sourceCpp('../src/CTM_cpp.cpp')
ff <- list.files('../R', full.names = T)
for (i in ff) source(i)
dat <- fread('../output/full_example_dat.csv')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM1D/test")
dat <- fread('../output/full_example_dat.csv')
dat <- fread('../data/full_example_dat.csv')
cols_zm <- names(dat)[grepl('zm.\\d*$', names(dat))]
zm <- as.numeric(unique(dat[, ..cols_zm]))
zm
cols_zm
y <- fread('../data/y.csv')
layers = 30
cols_zm <- names(dat)[grepl('zm.\\d*$', names(dat))]
zm <- as.numeric(unique(dat[, ..cols_zm]))
var_names <- c(names(y), rep('temp_C', layers), rep('pH', layers))
var_names <- gsub('xa.', '', var_names)
var_names <- gsub('dead','xa_dead', var_names)
melted_list <- lapply(var_names, function(i){
cols <- names(dat)[stri_detect_fixed(names(dat), i)]
cols <- cols[!grepl('eff|conc|zm|rut|up_layr|layers|flux', cols)]
melted <- melt(dat, id.vars = 'time', measure.vars = cols,
variable.name = 'variable', value.name = 'value')
melted[, .(time, variable, value)]})
melted_list <- lapply(var_names, function(i){
cols <- names(dat)[stri_detect_fixed(names(dat), i)]
cols <- cols[!grepl('eff|conc|zm|rut|up_layr|layers|flux', cols)]
melted <- melt(dat, id.vars = 'time', measure.vars = cols,
variable.name = 'variable', value.name = 'value')
melted[, .(time, variable, value)]})
dat.long <- rbindlist(melted_list)
names(dat)[stri_detect_fixed(names(dat), i)]
names(dat)[stri_detect_fixed(names(dat), temp_C)]
names(dat)[stri_detect_fixed(names(dat), 'temp_C')]
melted_list <- lapply(var_names, function(i){
cols <- names(dat)[stri_detect_fixed(names(dat), i)]
cols <- cols[!grepl('eff|conc|zm|rut|up_layr|layers|flux', cols)]
browser()
melted <- melt(dat, id.vars = 'time', measure.vars = cols,
variable.name = 'variable', value.name = 'value')
melted[, .(time, variable, value)]})
names(y)
names(y)[1]
names(y)[-'time']
names(y)[,-'time']
y <- fread('../data/y.csv')
layers = 30
dat <- fread('../data/full_example_dat.csv')
cols_zm <- names(dat)[grepl('zm.\\d*$', names(dat))]
zm <- as.numeric(unique(dat[, ..cols_zm]))
var_names <- c(names(y), rep('temp_C', layers), rep('pH', layers))
var_names <- gsub('xa.', '', var_names)
var_names <- gsub('dead','xa_dead', var_names)
melted_list <- lapply(var_names, function(i){
cols <- names(dat)[stri_detect_fixed(names(dat), i)]
cols <- cols[!grepl('eff|conc|zm|rut|up_layr|layers|flux', cols)]
melted <- melt(dat, id.vars = 'time', measure.vars = cols,
variable.name = 'variable', value.name = 'value')
melted[, .(time, variable, value)]})
var_names <- c(names(y), rep('temp_C', layers), rep('pH', layers))
View(y)
y <- read.csv('../data/y.csv')
View(y)
rm(list = ls())
library(data.table)
library(readxl)
dat_VS <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 1, skip = 1))
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2024-KVIK/scripts")
rm(list = ls())
library(data.table)
library(readxl)
dat_VS <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 1, skip = 1))
dat_anim <- data.table(read_excel('../data/original/Til Anders Peter og Frederik 14122023.xlsx', sheet = 2, skip = 1))
#fix mismatch in names
dat_anim[DyrNavn == 'Smågrise', DyrNavn := 'Smågrise, 7,5-30 kg']
dat_anim[DyrNavn == 'Slagtesvin', DyrNavn := 'Slagtesvin, 30-100,0 kg']
dat <- merge.data.table(dat_VS, dat_anim)
#change some names
old_names <- c('FirstOfAntalDyr', 'Ton gødning ab dyr', 'Tørstof pct ab dyr')
new_names <- c('NDyr', 'GoednabDyr', 'TSabDyr')
setnames(dat, old = old_names, new = new_names)
NDyr_farestald <- dat[StaldID %in% c(64, 65) & !duplicated(StaldID), sum(NDyr)]
NDyr_løbestald <- dat[DyrID == 12 & !duplicated(StaldID) & !StaldID %in% c(64, 65), sum(NDyr)]
frac_farestald <- NDyr_farestald/(NDyr_løbestald + NDyr_farestald)
frac_løbestald <- 1- frac_farestald
#make new coloumn "NDyr_mod" which can be directly multiplied with excretions to get yearly excretion.
dat[, NDyr_mod := NDyr]
dat[StaldID %in% c(64, 65), NDyr_mod := NDyr * 1/frac_farestald]
dat[!StaldID %in% c(64, 65) & DyrID == 12, NDyr_mod := NDyr * 1/frac_løbestald]
#calculate yearly excretions on columns
cols <- c('NabDyr', 'TANabDyr', 'GoednabDyr' )
new_cols <- paste0('Tot', cols)
dat[, (new_cols) := .SD * NDyr_mod, .SDcols = cols]
#model dat
dat_model_pig <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx')))
names(dat_model_pig) <- as.character(dat_model_pig[1, ])
dat_model_pig <- dat_model_pig[-c(1:2), ]
dat_model_cattle <- data.table(t(read_excel('../model/Metanproduktion_Arrhenius_v7_02012023.xlsx', sheet = 'Tabel_kvæg')))
names(dat_model_cattle) <- as.character(dat_model_cattle[1, ])
dat_model_cattle <- dat_model_cattle[-c(1:2), ]
dat_model <- rbind(dat_model_pig, dat_model_cattle, fill =T)
dat_model
#fix names in model spreadsheet
old_names <- c('CH4-udledning stald, kg/t gylle ab dyr',
'CH4-udledning stald og for/afhent.tank, kg/t gylle ab dyr',
'CH4-udledning lager, kg/t gylle ab dyr',
'CH4-udledning, afgasset gylle, kg/t gylle ab dyr',
'CH4-produktion, biogasanlæg, kg CH4/t gylle ab dyr',
'CH4-udledning stald, kg/t gylle ab stald',
'CH4-udledning stald og for/afhent.tank, kg/t gylle ab stald',
'CH4-udledning lager, kg/t gylle ab stald',
'CH4-udledning, afgasset gylle, kg/t gylle ab stald',
'CH4-produktion, biogasanlæg, inkl. halm, kg CH4/t gylle ab stald',
'NH3-udledning stald tempkorr, kg-N/t gylle ab dyr',
'NH3-udledning lager tempkorr, kg-N/t gylle ab dyr',
'N2O-udledning total, kg/t gylle ab dyr'
)
new_names <- c('CH4_dyr_stald', 'CH4_dyr_Stald_aft', 'CH4_dyr_lager', 'CH4_dyr_afg', 'CH4_dyr_biog',
'CH4_stald_stald', 'CH4_stald_Stald_aft', 'CH4_stald_lager', 'CH4_stald_afg', 'CH4_stald_biog',
'NH3_dyr_stald', 'NH3_dyr_lager', 'N2O_dyr_total'
)
setnames(dat_model, old = old_names, new = new_names)
dat_model <- dat_model[, c((new_names), 'GoedningsID') := lapply(.SD, as.numeric), .SDcols = c(new_names, 'GoedningsID')][, c(..new_names, 'StaldID', 'GoedningsID','Scenarie')]
#rows with a dot in StaldID
.rows <- dat_model[grepl("\\.", StaldID)]
#create replacement rows by splitting StaldID
.rows_rpl <- do.call(rbind, lapply(1:.rows[,.N], function(x) {
id <- unlist(strsplit(as.character(.rows[x, 'StaldID']), "\\."))
if(any(grepl("\\D", id))) id[grepl("\\D", id)] <- gsub("\\D", "", id[grepl("\\D", id)])
x <- rbindlist(replicate(length(id), .rows[x], simplify = FALSE))
x[, StaldID := ..id]
return(x)
}
))
dat_model <- rbind(dat_model[!grepl("\\.", StaldID)], .rows_rpl)[, StaldID := as.numeric(StaldID)]
dat_merged <- merge.data.table(dat, dat_model, by = c('StaldID', 'GoedningsID'), all = T, allow.cartesian=TRUE)
fwrite(dat_merged, '../data/dat_merged.csv', row.names = F)
rm(list = ls())
library(data.table)
library(openxlsx)
dat <- fread('../data/dat_merged.csv')
CO2_eq <- c(CH4 = 28, N2O = 298)
## SVIN
# gylle systemer
toklimastald_smågrise <- c(20)
spalter_smågrise <- c(46)
spalter_33_67_slagtesvin <- c(47)
spalter_50_75_slagtesvin <- c(72, 19)
spalter_25_50_slagtesvin <- c(73)
løs_individuel_søer <- c(60, 63, 8, 10, 80, 79)
farestald_delvis_spalte <- c(64)
farestald_fuldspalte <- c(65)
## KVÆG
# gylle systemer
kvæg_ringkanal <- c(6, 13)
kvæg_fast_skrab <- c(5, 11)
kvæg_spalter_skrab <- c(7, 14)
kvæg_hæld_fast_skrab <- c(49)
kvæg_andre_hyppig <- c(2, 4) # 2 is spaltegulvbokse, what is that?
model_gruppe_navne <- c('toklimastald_smågrise',
'spalter_smågrise',
'spalter_33_67_slagtesvin',
'spalter_50_75_slagtesvin',
'spalter_25_50_slagtesvin',
'løs_individuel_søer',
'farestald_delvis_spalte',
'farestald_fuldspalte',
'kvæg_ringkanal',
'kvæg_fast_skrab',
'kvæg_spalter_skrab',
'kvæg_hæld_fast_skrab',
'kvæg_andre_hyppig')
cols <- c('CH4_dyr_stald', 'CH4_dyr_lager', 'NH3_dyr_stald', 'NH3_dyr_lager')
cols <- c('CH4_dyr_stald', 'CH4_dyr_lager', 'NH3_dyr_stald', 'NH3_dyr_lager','N2O_dyr_total')
tot_cols <- paste0('tot', cols)
# Initialize the total columns with 0
dat <- dat[, (tot_cols) := 0][!duplicated(dat)]
biogas <- copy(dat)[Scenarie == 'kontrol'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg)][
, Scenarie := 'biogas']
hyppig_biogas <- copy(dat)[Scenarie == 'ugentlig' | Scenarie == 'hyppig'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg)][
, Scenarie := 'hyppig_biogas']
køling_biogas <- copy(dat)[Scenarie == 'køling'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg)][
, Scenarie := 'køling_biogas']
dat <- rbind(dat, biogas, hyppig_biogas, køling_biogas)
rm(list = ls())
library(data.table)
library(dplyr)
